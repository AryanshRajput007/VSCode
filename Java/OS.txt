Reader Writer problem:-

It is one af the synchronization problem . THis problem is related to database. 2 types of user are access the database one is reading and another one is writing.

For some data:-

Case 1: W W
Case 2: W R
Case 3: R W
Case 4: R R

int rc = 0;
semaphore mutex = 1;
semaphore db = 1

void Reader(void) {
    while(true) {
        down(mutex);
        rc = rc + 1;
        if(rc == 1) {
            down(db);
            up(mutex);
            
db CS
down(mutex) 
rc = rc - 1;
if(rc == 0) {
    then
    up(db);
    up(mutex);
    process_data;
}
        }
    }
}

void writer(void) {
    while(true) {
        down(db);
        DB CS
        up(db);
    }
}

# Dinning philosopher: -
It is a classical problem of synchronization which says that five philosopher are sitting around the table and there job is to think and eat.

Suppose there are 5 processes i.e P0,P1,P2,P3,and P4, so using the Dinning philosopher method:-

void philosophers(void) {
    while(true) {
        thinking();
        wait(take_fork(i));
        wait(take_fork(i + 1) % N);
        eat();
        signal(put_fork(i));
        signal(put_fork(i + 1) % N);
    }
}   


If two or more processes are waiting on happening of some event, which never happens then we say this processes are involved in deadlock.

There are four condition for deadlock: - 

1. Mutual exclusion: Atleast one resource can be used in non shareable model. Eg: - Printer.
2. No preemption: resource cannot be preempted that means the resource will be released by the process after completion of it's task.
3. Hold and wait: A process is current holding atleast one resource and requesting additional resources, which is hold by other resource.
4. Circular wait: Each process must be waiting for resource which is being held by other resource.




Memory Management:- 

Memory:- Computer memory is a device capable of storing memory temporary or permanently.
Types of Memory:-
1. RAM(Random Access Memory) 
2. ROM (Read Only Memory) 
3. PROM
4. EPROM
5. EEPROM

Memory Management:- It is an important characteristic of the OS.
In a multi-programming OS, the memory is used by multiple processes the task of sub dividing the memory among the different processes is called memory Management.

The main aim of the memory management is to achieve efficient utilization of memory.

Why Memory Management is required?

1. Allocate and de-allocate memory, before and after the process execution.
2. To keep track of used memory space by the processes.
3. For proper utilization of memory.
4. To minimize the fragmentation of the memory.

Physical and logical Address:- 

logical address: -It is an address generated by CPU during the program execution. It is also known as the virtual address.
Physical address:- In a memory, Physical location identifies by the physical address. Physical address space is utilized for every physical location relating to the logical addresses in the logical address space.

Based and limit register:- 

Start address of the program is the based register.
Length of the program is the limit register.

Memory Allocation :- It is a mechanism by which the computer program and the services are assigned with physical and virtual address space. 
Two types of memory allocation are there :-
1. Contiguous memory: - In this single Contiguous adjacent area is allocated in the memory for each program. When the process is needed to be executed memory is requested by the process than size of the process is compared with amount of Contiguous memory available in main memory. If enough memory is found than the process will be executed otherwise it will be added in the waiting queue.
 Partition of the memory can be done in three ways:- 
 1. Single process monitor: - In this the main memory is divided into two parts, one is OS and the other is user process area. Only one process can load into the memory, next will be loaded when the one is completed. It does not support multi-programming, only uni-programming is supported.
 2. Multi- programming with fixed Partition
 3. Multi- programming with variable Partition
